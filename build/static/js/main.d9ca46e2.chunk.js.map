{"version":3,"sources":["components/Navigation/Toolbar/Toolbar.tsx","components/Layout/Layout.tsx","shared/components/DialogTranstion/DialogTransition.tsx","shared/components/ConfirmDisplay/ConfirmDisplay.tsx","components/Todos/TodosHeader/TodosHeader.tsx","components/Todos/TodosSearch/TodosSearch.tsx","components/Todos/TodosCountDisplay/TodosCountDisplay.tsx","store/actions/actionsTodos/actionTypes.ts","services/todos-service.ts","store/actions/actionsTodos/todos.ts","components/Todos/AddEditTodoDialog/AddEditTodoDialog.tsx","components/Todos/TodoPreviewDialog/TodoPreviewDialog.tsx","components/Todos/TodosList/HeaderTable/HeaderTable.tsx","components/Todos/TodoRow/TodoRow.tsx","components/Todos/TodosList/TodosList.tsx","containers/TodosContainer/TodosContainer.tsx","App.tsx","store/reducers/todos/todos.ts","index.tsx","containers/TodosContainer/TodosContainer.module.scss","shared/components/ConfirmDisplay/ConfirmDisplay.module.scss","components/Todos/AddEditTodoDialog/AddEditTodoDialog.module.scss","components/Todos/TodoPreviewDialog/TodoPreviewDialog.module.scss","components/Navigation/Toolbar/Toolbar.module.scss","shared/components/DialogTranstion/DialogTransition.module.scss","components/Todos/TodosHeader/TodosHeader.module.scss","components/Todos/TodosCountDisplay/TodosCountDisplay.module.scss"],"names":["Toolbar","className","styles","toolbar","Layout","props","content","children","Transition","React","forwardRef","ref","Slide","direction","DialogTransition","open","handleCloseDialogTransition","Dialog","TransitionComponent","keepMounted","onClose","classes","paper","contenDialog","ConfirmDisplay","isOpen","onDisagree","DialogTitle","id","title","DialogContent","DialogContentText","DialogActions","Button","variant","color","onClick","root","disagreeBtn","onAgree","agreeBtn","TodosHeader","headerSection","headerTitle","TodosSearch","useState","searchVal","setSearchVal","FormControl","size","fullWidth","OutlinedInput","placeholder","value","onChange","e","val","target","onSearch","endAdornment","InputAdornment","position","TodosCountDisplay","countText","count","LOAD_TODOS","LOAD_TODOS_SUCCESS","LOAD_TODOS_FAILED","UPDATE_TODO","UPDATE_TODO_SUCCESS","UPDATE_TODO_FAILED","DELETE_TODO","DELETE_TODO_SUCCESS","DELETE_TODO_FAILED","ADD_TODO","ADD_TODO_SUCCESS","ADD_TODO_FAILED","SET_COUNT_DOCUMETS","UPDATE_CRITERIA","getTodos","criteria","a","axios","post","createTodo","todo","updateTodo","patch","deleteTodo","todoId","delete","_loadTodosSuccess","data","type","actionTypes","payload","_updateTodoFaield","_addTodoSuccess","_addTodoFailed","_setCount","_deleteTodoSuccess","updateCriteria","AddEditTodoDialog","todoVal","setTodoVal","onCloseDialog","onCloseAddEditDialog","useEffect","text","TextField","boxBtn","updatedTodo","onUpdateTodo","newTodo","createdDate","Date","isCompleted","onAddTodo","addBtnTodo","btnText","TodoPreviewDialog","row","headCells","label","HeaderTable","TableHead","TableRow","map","headCell","TableCell","key","align","TodoRow","hover","role","tabIndex","_id","selected","Checkbox","taskCompletedHandler","checked","scope","moment","format","IconButton","openTodoPreviewDialog","fontSize","openEditDialog","deleteTodoHandler","TodosList","Paper","TableContainer","Table","isFinished","TableBody","todos","TablePagination","selectRoot","caption","component","rowsPerPage","page","onChangePage","handleChangePage","TodosContainer","isOpenDeleteConfirm","setIsOpenDeleteConfirm","setPage","isOpeAddDialog","setIsOpenAddDialog","isOpeEditDialog","setIsOpeEditDialog","isOpenTodoPreviewDialog","setIsOpenTodoPreviewDialog","currentActiveTodo","setCurrentActiveTodo","useSelector","state","todosReducer","isLoading","dispatch","useDispatch","err","actions","term","offset","pageSize","CircularProgress","circularProgress","thickness","sectionDisplayCount","newTasBtn","copyTodo","event","newPage","App","initialState","error","reducer","action","copyTodos","index","findIndex","filter","jss","create","plugins","jssPreset","rtl","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","StylesProvider","document","getElementById","module","exports"],"mappings":"gUAGaA,EAAoB,WAC7B,OACI,4BAAQC,UAAWC,IAAOC,WCDrBC,EAAmB,SAACC,GAC7B,OACI,oCACA,kBAAC,EAAD,MACA,0BAAMJ,UAAWC,IAAOI,SACnBD,EAAME,Y,+FCDbC,EAAaC,IAAMC,YAAqC,SAAoBL,EAAOM,GACrF,OAAO,kBAACC,EAAA,EAAD,eAAOC,UAAU,KAAKF,IAAKA,GAASN,OAQlCS,EAAoD,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,4BAA6BT,EAAe,EAAfA,SACnG,OACI,kBAACU,EAAA,EAAD,CACIF,KAAMA,EACNG,oBAAqBV,EACrBW,aAAW,EACXC,QAASJ,EACTK,QAAS,CAAEC,MAAO,qBAElB,yBAAKrB,UAAWC,IAAOqB,cAClBhB,K,iBCbJiB,EAAgD,SAACnB,GAC1D,OACI,kBAAC,EAAD,CAAkBU,KAAMV,EAAMoB,OAAQT,4BAA6BX,EAAMqB,YACrE,kBAACC,EAAA,EAAD,CAAaC,GAAG,sBAAsBvB,EAAMwB,OAC5C,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAmBH,GAAG,4BACjBvB,EAAMC,UAGf,kBAAC0B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS/B,EAAMqB,WAAYL,QAAS,CAAEgB,KAAMnC,IAAOoC,cAA/F,oCACA,kBAACL,EAAA,EAAD,CAAQE,MAAM,UAAUC,QAAS/B,EAAMkC,QAASlB,QAAS,CAAEgB,KAAMnC,IAAOsC,WAAxE,uC,iBCjBHC,EAA0C,SAACpC,GACpD,OACI,yBAAKJ,UAAWC,IAAOwC,eACnB,4BAAKrC,EAAMsC,e,4CCFVC,EAA0C,SAACvC,GAAW,IAAD,EAC5BwC,mBAAS,IADmB,mBACvDC,EADuD,KAC5CC,EAD4C,KAQ9D,OAAO,kBAACC,EAAA,EAAD,CAAad,QAAQ,WAAWe,KAAK,QAAQC,WAAS,GACzD,kBAACC,EAAA,EAAD,CACIC,YAAY,gEACZC,MAAOP,EACPQ,SAAU,SAAAC,GAAC,OATMC,EAScD,EAAEE,OAAOJ,MAR5CN,EAAaS,QACbnD,EAAMqD,SAASF,GAFK,IAACA,GAUjBG,aAAc,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OAAM,kBAAC,IAAD,CAAY5D,UAAU,sB,iBCflE6D,EAAqD,SAACzD,GAC/D,OAAO,wBAAIJ,UAAWC,IAAO6D,WAAtB,iGAAqD1D,EAAM2D,MAA3D,M,mDCPEC,EAAa,iCACbC,EAAqB,iDACrBC,EAAoB,+CACpBC,EAAc,mCACdC,EAAsB,mDACtBC,EAAqB,iDACrBC,GAAc,mCACdC,GAAsB,mDACtBC,GAAqB,iDACrBC,GAAW,8BACXC,GAAmB,8CACnBC,GAAkB,4CAGlBC,GAAqB,kDAGrBC,GAAkB,oC,oBCXlBC,GAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACPC,KAAMC,KAAN,UAJX,SAIW,cAAqCH,GAD9B,mFAAH,sDAIRI,GAAU,uCAAG,WAAOC,GAAP,SAAAJ,EAAA,sEACTC,KAAMC,KAAN,UARX,SAQW,gBAAuCE,GAD9B,mFAAH,sDAIVC,GAAU,uCAAG,WAAOD,GAAP,SAAAJ,EAAA,sEACTC,KAAMK,MAAN,UAZX,SAYW,gBAAwCF,GAD/B,mFAAH,sDAIVG,GAAU,uCAAG,WAAOC,GAAP,SAAAR,EAAA,sEACTC,KAAMQ,OAAN,UAhBX,SAgBW,wBAAyCD,IADhC,mFAAH,sDCkEjBE,GAAoB,SAACC,GACvB,MAAO,CACHC,KAAMC,EACNC,QAASH,IAwBXI,GAAoB,SAACJ,GACvB,MAAO,CACHC,KAAMC,EACNC,QAASH,IAUXK,GAAkB,SAACL,GACrB,MAAO,CACHC,KAAMC,GACNC,QAASH,IAIXM,GAAiB,SAACN,GACpB,MAAO,CACHC,KAAMC,GACNC,QAASH,IAKXO,GAAY,SAACP,GACf,MAAO,CACHC,KAAMC,GACNC,QAASH,IAUXQ,GAAqB,SAACX,GACxB,MAAO,CACHI,KAAMC,GACNC,QAASN,IAsBJY,GAAiB,SAACrB,GAC3B,MAAO,CACHa,KAAMC,GACNC,QAASf,I,uCCpKJsB,GAAkD,SAACjG,GAAW,IAAD,EACxCwC,mBAAS,IAD+B,mBAC/D0D,EAD+D,KACtDC,EADsD,KAGhEC,EAAgB,WAClBpG,EAAMqG,wBA2BV,OANAC,qBAAU,WACa,IAAD,EAAdtG,EAAMoB,QACN+E,GAAW,UAAAnG,EAAMgF,YAAN,eAAYuB,OAAQ,MAEpC,CAACvG,EAAMoB,SAGN,yBAAKxB,UAAU,oBACX,kBAAC,EAAD,CAAkBc,KAAMV,EAAMoB,OAAQT,4BAA6ByF,GAC/D,kBAAC9E,EAAA,EAAD,CAAaN,QAAS,CAAEgB,KAAM,iBAAmBhC,EAAMwB,OACvD,kBAACgF,GAAA,EAAD,CAAW3E,QAAQ,SAASmB,MAAOkD,EAASjD,SAAU,SAAAC,GAAC,OAAIiD,EAAWjD,EAAEE,OAAOJ,UAC/E,yBAAKpD,UAAWC,KAAO4G,QACnB,kBAAC7E,EAAA,EAAD,CAAQG,QA9BR,WACZ,GAAI/B,EAAMgF,KAAM,CACZ,IAAM0B,EAAkB,2BACjB1G,EAAMgF,MADW,IAEpBuB,KAAML,IAEVlG,EAAM2G,aAAcD,OACjB,CACH,IAAME,EAAiB,CACnBC,YAAa,IAAIC,KACjBP,KAAML,EACNa,aAAa,GAEjB/G,EAAMgH,UAAWJ,GAErBR,KAesCvE,QAAQ,YAAYe,KAAK,QAAQ5B,QAAS,CAAEgB,KAAMnC,KAAOoH,aAAejH,EAAMkH,a,oBCzC/GC,GAAsD,SAACnH,GAAW,IAAD,IAC1E,OACI,kBAAC,EAAD,CAAkBU,KAAMV,EAAMoB,OAAQT,4BAA6BX,EAAMoG,eACrE,kBAAC9E,EAAA,EAAD,CAAaN,QAAS,CAAEgB,KAAM,iBAA9B,iEACA,yBAAKpC,UAAWC,KAAOuH,KACnB,mFACA,wCAAOpH,EAAMgF,YAAb,aAAO,EAAYuB,OAEvB,yBAAK3G,UAAWC,KAAOuH,KACnB,qGACA,wCAAOpH,EAAMgF,YAAb,aAAO,EAAY6B,gB,gFCpB7BQ,GAAY,CACd,CAAE9F,GAAI,aAAc+F,MAAO,kCAC3B,CAAE/F,GAAI,OAAQ+F,MAAO,wCACrB,CAAE/F,GAAI,OAAQ+F,MAAO,iEACrB,CAAE/F,GAAI,aAAc+F,MAAO,yCAGlBC,GAAuB,WAChC,OAAO,kBAACC,GAAA,EAAD,KACH,kBAACC,GAAA,EAAD,KACKJ,GAAUK,KAAI,SAACC,GAAD,OACX,kBAACC,GAAA,EAAD,CACIC,IAAKF,EAASpG,GACduG,MAAM,QACN9G,QAAS,CAACgB,KAAM,eAEf2F,EAASL,a,qGCDjBS,GAAkC,SAAC/H,GAC5C,OAAO,kBAACyH,GAAA,EAAD,CACHO,OAAK,EACLC,KAAK,WACLC,UAAW,EACXL,IAAK7H,EAAMgF,KAAKmD,IAChBC,SAAUpI,EAAMgF,KAAK+B,YACrB/F,QAAS,CAAEgB,KAAM,cAEjB,kBAAC4F,GAAA,EAAD,CAAWE,MAAM,QAAQ9G,QAAS,CAACgB,KAAM,eACrC,kBAACqG,GAAA,EAAD,CACItG,QAAS,kBAAM/B,EAAMsI,qBAAqBtI,EAAMgF,OAChDuD,QAASvI,EAAMgF,KAAK+B,YACpBnE,KAAK,WAGb,kBAACgF,GAAA,EAAD,CAAWE,MAAM,QAAQU,MAAM,MAAMxH,QAAS,CAACgB,KAAM,eAChDhC,EAAMgF,KAAKuB,MAEhB,kBAACqB,GAAA,EAAD,CAAWE,MAAM,QAAQ9G,QAAS,CAACgB,KAAM,eAAgByG,KAAOzI,EAAMgF,KAAK6B,aAAa6B,OAAO,eAC/F,kBAACd,GAAA,EAAD,CAAWE,MAAM,QAAQ9G,QAAS,CAACgB,KAAM,eACrC,kBAAC2G,GAAA,EAAD,CAAY/F,KAAK,QAAQb,QAAS,kBAAM/B,EAAM4I,sBAAsB5I,EAAMgF,QACtE,kBAAC,KAAD,CAAgB6D,SAAS,aAE7B,kBAACF,GAAA,EAAD,CAAY/F,KAAK,QAAQb,QAAS,kBAAM/B,EAAM8I,eAAe9I,EAAMgF,QAC/D,kBAAC,KAAD,CAAU6D,SAAS,aAGvB,kBAACF,GAAA,EAAD,CAAY/F,KAAK,QAAQb,QAAS,kBAAM/B,EAAM+I,kBAAkB/I,EAAMgF,QAClE,kBAAC,KAAD,CAAY6D,SAAS,gB,qBCpBxBG,GAAsC,SAAChJ,GAChD,OAAO,kBAACiJ,GAAA,EAAD,KACH,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOvG,KAAK,UACR,kBAAC,GAAD,MACC5C,EAAMoJ,YAAc,kBAACC,GAAA,EAAD,KAChBrJ,EAAMsJ,OAAStJ,EAAMsJ,MAAM5B,KAAI,SAAC1C,GAC7B,OACI,kBAAC,GAAD,CACI6C,IAAK7C,EAAKmD,IACVnD,KAAMA,EACNsD,qBAAsBtI,EAAMsI,qBAC5BM,sBAAuB5I,EAAM4I,sBAC7BE,eAAgB9I,EAAM8I,eACtBC,kBAAmB/I,EAAM+I,0BAOjD,kBAACQ,GAAA,EAAD,CACIvI,QAAS,CAACwI,WAAY,SAAUC,QAAS5J,KAAO4J,SAChDC,UAAU,MACV/F,MAAO3D,EAAM2D,MACbgG,YAAa,EACbC,KAAM5J,EAAM4J,KACZC,aAAc7J,EAAM8J,qBCrCnBC,GAAgC,SAAC/J,GAAW,IAAD,EACEwC,oBAAkB,GADpB,mBAC7CwH,EAD6C,KACxBC,EADwB,OAE5BzH,mBAAiB,GAFW,mBAE7CoH,EAF6C,KAEvCM,EAFuC,OAGP1H,oBAAkB,GAHX,mBAG7C2H,EAH6C,KAG7BC,EAH6B,OAIN5H,oBAAkB,GAJZ,mBAI7C6H,EAJ6C,KAI5BC,EAJ4B,OAKU9H,oBAAkB,GAL5B,mBAK7C+H,EAL6C,KAKpBC,EALoB,OAMFhI,qBANE,mBAM7CiI,EAN6C,KAM1BC,EAN0B,KAQ9C/F,EAA0BgG,cAA2B,SAAAC,GAAK,OAAIA,EAAMC,aAAalG,YACjFmG,EAAqBH,cAA2B,SAAAC,GAAK,OAAIA,EAAMC,aAAaC,aAC5E1B,EAAsBuB,cAA2B,SAAAC,GAAK,OAAIA,EAAMC,aAAazB,cAC7EE,EAAQqB,cAA2B,SAAAC,GAAK,OAAIA,EAAMC,aAAavB,SAC/D3F,EAAQgH,cAA2B,SAAAC,GAAK,OAAIA,EAAMC,aAAalH,SAE/DoH,EAAWC,eAEjB1E,qBAAU,WACNyE,ENqIiB,SAACpG,GAAD,8CAA6B,WAAOoG,GAAP,iBAAAnG,EAAA,6DAClDmG,EAxFO,CACHvF,KAAMC,IAsFwC,kBAGvBf,GAASC,GAHc,gBAGtCY,EAHsC,EAGtCA,KACRwF,EAASzF,GAAkBC,EAAK+D,QAChCyB,EAASjF,GAAUP,EAAK5B,QALsB,kDAO9CoH,GAlFkBE,EAkFQ,EAAD,GAjFtB,CACHzF,KAAMC,EACNC,QAASuF,KAwEqC,kCA3E7B,IAACA,IA2E4B,qBAA7B,sDMrIRC,CAAkBvG,MAC5B,CAACoG,EAAUpG,IAEd,IAKMM,EAAa,SAACD,GAChB+F,EN8IyB,SAAC/F,GAAD,8CAAiB,WAAO+F,GAAP,SAAAnG,EAAA,6DAC9CmG,EAtFO,CACHvF,KAAMC,IAoFoC,kBAGpCR,GAAWD,GAHyB,OAI1C+F,EAnFG,CACHvF,KAAMC,EACNC,QAiF4BV,IAJc,gDAM1C+F,EAASpF,GAAkB,EAAD,KANgB,yDAAjB,sDM9IhBuF,CAA0BlG,KAuCvC,OACI,yBAAKpF,UAAU,aACX,kBAAC,EAAD,CACIwB,OAAQ4I,EACR3I,WAAY,kBAAM4I,GAAuB,IACzC/H,QA/Bc,WN2IG,IAACkD,EM1ItBqF,GAAqBA,EAAkBtC,MACvC4C,GNyIsB3F,EMzIaqF,EAAkBtC,INyIhC,uCAAoB,WAAO4C,GAAP,SAAAnG,EAAA,6DACjDmG,EAhDO,CACHvF,KAAMC,KA8CuC,kBAGvCN,GAAWC,GAH4B,OAI7C2F,EAAShF,GAAmBX,IAJiB,gDAM7C2F,GAzCmBxF,EAyCQ,EAAD,GAxCvB,CACHC,KAAMC,GACNC,QAASH,KAgCoC,kCAnC3B,IAACA,IAmC0B,oBAApB,wDMxIrB0E,GAAuB,KA6BnBzI,MAAM,gEACNvB,QAAQ,kIACZ,kBAAC,GAAD,CAAmBmB,OAAQmJ,EAAyBnE,cAAe,kBAAMoE,GAA2B,IAAQxF,KAAMyF,IAClH,kBAAC,GAAD,CACIjJ,MAAM,yFACN0F,QAAQ,0DACR9F,OAAQ+I,EACR9D,qBAAsB,kBAAM+D,GAAmB,IAC/CpD,UAjCI,SAAChC,GACb+F,EN8IsB,SAAC/F,GAAD,8CAAiB,WAAO+F,GAAP,iBAAAnG,EAAA,6DAC3CmG,EAvFO,CACHvF,KAAMC,KAqFiC,kBAGhBV,GAAWC,GAHK,gBAG/BO,EAH+B,EAG/BA,KACRwF,EAASnF,GAAgBL,IAJc,gDAMvCwF,EAASlF,GAAe,EAAD,KANgB,yDAAjB,sDM9IbqF,CAAuBlG,OAiC5B,kBAAC,GAAD,CACIxD,MAAM,gEACN0F,QAAQ,0DACR9F,OAAQiJ,EACRhE,qBAAsB,kBAAMiE,GAAmB,IAC/CtF,KAAMyF,EACN9D,aAAc1B,IAClB,kBAAC,EAAD,CAAa3C,YAAY,wEACzB,kBAAC,EAAD,CAAae,SA3DS,SAAC8H,GAC3BJ,EAASG,GAAA,2BAA4BvG,GAA5B,IAAsCyG,OAAQ,EAAGC,SAAU,EAAGF,cA2DlEL,GAAa,kBAACQ,EAAA,EAAD,CAAkBtK,QAAS,CAAEgB,KAAMnC,IAAO0L,kBAAoBC,UAAW,IAAK5I,KAAM,KAClG,6BAAShD,UAAWC,IAAO4L,qBACvB,kBAAC,EAAD,CAAmB9H,MAAOA,IAC1B,kBAAC/B,EAAA,EAAD,CAAQG,QAAS,kBAAMqI,GAAmB,IAAOvI,QAAQ,YAAYe,KAAK,QAAQ5B,QAAS,CAAEgB,KAAMnC,IAAO6L,YAA1G,4DAEJ,kBAAC,GAAD,CACIpC,MAAOA,EACPhB,qBA/DW,SAACtD,GACpB,IAAM2G,EAAQ,eAAQ3G,GACtB2G,EAAS5E,aAAe4E,EAAS5E,YACjC9B,EAAW0G,IA6DH/C,sBA1CkB,SAAC5D,GAC3B0F,EAAqB1F,GACrBwF,GAA2B,IAyCnB1B,eAhDW,SAAC9D,GACpB0F,EAAqB1F,GACrBsF,GAAmB,IA+CXvB,kBAvCoB,SAAC/D,GAC7B0F,EAAqB1F,GACrBiF,GAAuB,IAsCftG,MAAOA,EACPgB,SAAUA,EACViF,KAAMA,EACNE,iBAnFa,SAAC8B,EAAgBC,GACtCd,EAASG,GAAA,2BAA4BvG,GAA5B,IAAsCyG,OAAQS,EAAUlH,EAAS0G,aAC1EnB,EAAQ2B,IAkFAzC,WAAYA,MC3Gb0C,OAVf,WACE,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,GAAD,S,2DCMFC,GAA2B,CAC7BzC,MAAO,GACP3E,SAAU,CACNyG,OAAQ,EACRC,SAAU,GAEd1H,MAAO,EACPmH,WAAW,EACX1B,YAAY,EACZ4C,MAAO,MAqFIC,GAlFC,WAAiD,IAAhDrB,EAA+C,uDAAvCmB,GAAcG,EAAyB,uCAC5D,OAAQA,EAAO1G,MACX,KAAKC,EACD,OAAO,2BACAmF,GADP,IAEIE,WAAW,EACX1B,YAAY,IAEpB,KAAK3D,EACD,OAAO,2BACAmF,GADP,IAEItB,MAAO4C,EAAOxG,QACdoF,WAAW,EACX1B,YAAY,IAGpB,KAAK3D,GACD,OAAO,2BACAmF,GADP,IAEIjH,MAAOuI,EAAOxG,UAEtB,KAAKD,GACD,OAAO,2BACAmF,GADP,IAEIjG,SAAUuH,EAAOxG,UAEzB,KAAKD,EACD,OAAO,eACAmF,GAEX,KAAKnF,EACD,IAAM0G,EAAS,YAAOvB,EAAMtB,OACtB8C,EAAQxB,EAAMtB,MAAM+C,WAAU,SAAArH,GAAI,OAAIA,EAAKmD,MAAQ+D,EAAOxG,QAAQyC,OAExE,OADAgE,EAAUC,GAASF,EAAOxG,QACnB,2BACAkF,GADP,IAEItB,MAAO6C,IAEf,KAAK1G,GACD,OAAO,2BACAmF,GADP,IAEIE,WAAW,EACX1B,YAAY,IAGpB,KAAK3D,GACD,OAAO,2BACAmF,GADP,IAEItB,MAAOsB,EAAMtB,MAAMgD,QAAO,SAAAtH,GAAI,OAAIA,EAAKmD,MAAQ+D,EAAOxG,WACtD/B,MAAOiH,EAAMjH,MAAQ,EACrBmH,WAAW,EACX1B,YAAY,IAEpB,KAAK3D,GACD,OAAO,2BACAmF,GADP,IAEIE,WAAW,EACX1B,YAAY,IAEpB,KAAK3D,GACD,OAAO,2BACAmF,GADP,IAEItB,MAAM,CAAE4C,EAAOxG,SAAV,mBAAsBkF,EAAMtB,QACjC3F,MAAOiH,EAAMjH,MAAQ,EACrBmH,WAAW,EACX1B,YAAY,IAEpB,KAAK3D,GACL,KAAKA,EACL,KAAKA,GACL,KAAKA,EACD,OAAO,2BACAmF,GADP,IAEIoB,MAAOE,EAAOxG,QACdoF,WAAW,EACX1B,YAAY,IAEpB,QACI,OAAOwB,I,UCzFb2B,GAAMC,aAAO,CAAEC,QAAQ,GAAD,mBAAMC,eAAYD,SAAlB,CAA2BE,WAE1CC,GAAcC,aAAgB,CACzChC,kBAKIiC,GAAoBC,OAAeC,sCAAwCC,KAE3EC,GAAQC,aAAYP,GAAaE,GAAiBM,aAAgBC,QAGxEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,KAAD,CAAUN,MAAOA,IACf,kBAACO,GAAA,EAAD,CAAgBlB,IAAKA,IACnB,kBAAC,GAAD,SAINmB,SAASC,eAAe,U,mBCnC1BC,EAAOC,QAAU,CAAC,oBAAsB,4CAA4C,UAAY,kCAAkC,SAAW,iCAAiC,UAAY,kCAAkC,iBAAmB,2C,mBCA/OD,EAAOC,QAAU,CAAC,YAAc,oCAAoC,SAAW,mC,mBCA/ED,EAAOC,QAAU,CAAC,OAAS,kCAAkC,WAAa,wC,mBCA1ED,EAAOC,QAAU,CAAC,IAAM,iC,wCCAxBD,EAAOC,QAAU,CAAC,QAAU,2B,mBCA5BD,EAAOC,QAAU,CAAC,aAAe,yC,mBCAjCD,EAAOC,QAAU,CAAC,cAAgB,qC,mBCAlCD,EAAOC,QAAU,CAAC,UAAY,wC","file":"static/js/main.d9ca46e2.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './Toolbar.module.scss';\r\n\r\nexport const Toolbar: React.FC = () => {\r\n    return (\r\n        <header className={styles.toolbar}></header>\r\n    )\r\n}","import React from 'react';\r\nimport styles from './Layout.module.scss';\r\nimport { Toolbar } from '../Navigation/Toolbar/Toolbar';\r\n\r\nexport const Layout: React.FC = (props) => {\r\n    return (\r\n        <>\r\n        <Toolbar />\r\n        <main className={styles.content}>\r\n            {props.children}\r\n        </main>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\n\r\nimport styles from './DialogTransition.module.scss'\r\n\r\nconst Transition = React.forwardRef<unknown, TransitionProps>(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props as any} />;\r\n});\r\n\r\ninterface DialogTransitionProps {\r\n    open: boolean;\r\n    handleCloseDialogTransition: () => void;\r\n}\r\n\r\nexport const DialogTransition: React.FC<DialogTransitionProps> = ({ open, handleCloseDialogTransition, children }) => {\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={handleCloseDialogTransition}\r\n            classes={{ paper: 'dialog-root-base' }}\r\n        >\r\n            <div className={styles.contenDialog}>\r\n                {children}\r\n            </div>\r\n        </Dialog>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { DialogContent, DialogActions, DialogTitle, Button, DialogContentText } from '@material-ui/core';\r\nimport { DialogTransition } from '../DialogTranstion/DialogTransition';\r\n\r\nimport styles from './ConfirmDisplay.module.scss';\r\n\r\ninterface ConfirmDisplayProps {\r\n    isOpen: boolean;\r\n    onDisagree: () => void;\r\n    onAgree: () => void;\r\n    title: string;\r\n    content: string;\r\n}\r\n\r\nexport const ConfirmDisplay: React.FC<ConfirmDisplayProps> = (props) => {\r\n    return (\r\n        <DialogTransition open={props.isOpen} handleCloseDialogTransition={props.onDisagree}>\r\n            <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    {props.content}\r\n          </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={props.onDisagree} classes={{ root: styles.disagreeBtn }} >לא, בטל</Button>\r\n                <Button color=\"primary\" onClick={props.onAgree} classes={{ root: styles.agreeBtn }}>כן, מחק</Button>\r\n            </DialogActions>\r\n        </DialogTransition>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport styles from './TodosHeader.module.scss';\r\n\r\ninterface TodosHeaderProps {\r\n    headerTitle: string;\r\n}\r\n\r\nexport const TodosHeader: React.FC<TodosHeaderProps> = (props) => {\r\n    return (\r\n        <div className={styles.headerSection}>\r\n            <h1>{props.headerTitle}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport { FormControl, InputAdornment, OutlinedInput } from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\ninterface TodosSearchProps {\r\n    onSearch: (term: string) => void;\r\n}\r\n\r\nexport const TodosSearch: React.FC<TodosSearchProps> = (props) => {\r\n    const [searchVal, setSearchVal] = useState('');\r\n\r\n    const onChangeHandler = (val:string) => {\r\n        setSearchVal(val);\r\n        props.onSearch(val);\r\n    }\r\n    \r\n    return <FormControl variant=\"outlined\" size=\"small\" fullWidth>\r\n        <OutlinedInput\r\n            placeholder=\"חיפוש משימה\"\r\n            value={searchVal}\r\n            onChange={e => onChangeHandler(e.target.value)}\r\n            endAdornment={<InputAdornment position=\"end\"><SearchIcon className=\"icon-opacity\" /></InputAdornment>}\r\n        />\r\n    </FormControl>\r\n}\r\n","import React from 'react';\r\nimport styles from './TodosCountDisplay.module.scss';\r\n\r\ninterface TodosCountDisplayProps {\r\n    count: number;\r\n}\r\n\r\nexport const TodosCountDisplay:React.FC<TodosCountDisplayProps> = (props) => {\r\n    return <h3 className={styles.countText}>רשימת המשימות שלך ({props.count})</h3>\r\n}\r\n","//handle todos\r\nexport const LOAD_TODOS = '[LOAD_TODOS] load todos handle';\r\nexport const LOAD_TODOS_SUCCESS = '[LOAD_TODOS_SUCCESS] load todos success handle';\r\nexport const LOAD_TODOS_FAILED = '[LOAD_TODOS_FAILED] load todos failed handle';\r\nexport const UPDATE_TODO = '[UPDATE_TODO] update todo handle';\r\nexport const UPDATE_TODO_SUCCESS = '[UPDATE_TODO_SUCCESS] update todo success handle';\r\nexport const UPDATE_TODO_FAILED = '[UPDATE_TODO_FAILED] update todo faield handle';\r\nexport const DELETE_TODO = '[DELETE_TODO] delete todo handle';\r\nexport const DELETE_TODO_SUCCESS = '[DELETE_TODO_SUCCESS] delete todo success handle';\r\nexport const DELETE_TODO_FAILED = '[DELETE_TODO_FAILED] delete todo failed handle';\r\nexport const ADD_TODO = '[ADD_TODO] add todo handler';\r\nexport const ADD_TODO_SUCCESS = '[ADD_TODO_SUCCESS] add todo success handler';\r\nexport const ADD_TODO_FAILED = '[ADD_TODO_FAILED] add todo failed handler';\r\n\r\n//handle count\r\nexport const SET_COUNT_DOCUMETS = '[SET_COUNT_DOCUMETS] set count documents handle';\r\n\r\n//handle criteria\r\nexport const UPDATE_CRITERIA = '[UPDATE_CRITERIA] update criteria';\r\n\r\n\r\n\r\n","import axios from 'axios';\r\nimport { ITodoCriteria } from '../models/todo-criteria';\r\nimport { ITodo } from '../models/todo';\r\nconst TODOS_URL = (process.env.NODE_ENV !== 'development')\r\n    ? '/todos'\r\n    : '//localhost:8080/todos';\r\n\r\nexport const getTodos = async (criteria: ITodoCriteria) => {\r\n    return await axios.post(`${TODOS_URL}/get-todos`, criteria);\r\n};\r\n\r\nexport const createTodo = async (todo: ITodo) => {\r\n    return await axios.post(`${TODOS_URL}/create-todo`, todo);\r\n};\r\n\r\nexport const updateTodo = async (todo: ITodo) => {\r\n    return await axios.patch(`${TODOS_URL}/update-todo`, todo);\r\n};\r\n\r\nexport const deleteTodo = async (todoId: string) => {\r\n    return await axios.delete(`${TODOS_URL}/delete-todo/${todoId}`);\r\n};","import { ITodo } from '../../../models/todo';\r\nimport * as actionTypes from './actionTypes';\r\nimport { ITodoCriteria } from '../../../models/todo-criteria';\r\nimport { Dispatch } from 'react';\r\nimport { getTodos, updateTodo, deleteTodo, createTodo } from '../../../services/todos-service';\r\n\r\n// load todos\r\ninterface LoadTodos {\r\n    type: typeof actionTypes.LOAD_TODOS;\r\n}\r\n\r\ninterface LoadTodosSuccess {\r\n    type: typeof actionTypes.LOAD_TODOS_SUCCESS;\r\n    payload: ITodo[];\r\n}\r\n\r\ninterface LoadTodosFailed {\r\n    type: typeof actionTypes.LOAD_TODOS_FAILED;\r\n    payload: any;\r\n}\r\n\r\n//update todo\r\ninterface UpdateTodo {\r\n    type: typeof actionTypes.UPDATE_TODO,\r\n}\r\n\r\ninterface UpdateTodoSuccess {\r\n    type: typeof actionTypes.UPDATE_TODO_SUCCESS,\r\n    payload: ITodo\r\n}\r\n\r\ninterface UpdateTodoFailed {\r\n    type: typeof actionTypes.UPDATE_TODO_FAILED,\r\n    payload: any;\r\n}\r\n\r\n//delete todo\r\ninterface DeleteTodo {\r\n    type: typeof actionTypes.DELETE_TODO\r\n}\r\n\r\ninterface DeleteTodoSuccess {\r\n    type: typeof actionTypes.DELETE_TODO_SUCCESS,\r\n    payload: string\r\n}\r\n\r\ninterface DeleteTodoFailed {\r\n    type: typeof actionTypes.DELETE_TODO_FAILED,\r\n    payload: any\r\n}\r\n\r\n// set count\r\ninterface SetCount {\r\n    type: typeof actionTypes.SET_COUNT_DOCUMETS;\r\n    payload: number;\r\n}\r\n\r\n//update criteria\r\ninterface UpdateCriteria {\r\n    type: typeof actionTypes.UPDATE_CRITERIA;\r\n    payload: ITodoCriteria\r\n}\r\n\r\n//add todo\r\ninterface AddTodo {\r\n    type: typeof actionTypes.ADD_TODO\r\n}\r\n\r\ninterface AddTodoSuccess {\r\n    type: typeof actionTypes.ADD_TODO_SUCCESS,\r\n    payload: ITodo\r\n}\r\n\r\ninterface AddTodoFailed {\r\n    type: typeof actionTypes.ADD_TODO_FAILED,\r\n    payload: any\r\n}\r\n\r\n\r\nconst _loadTodos = (): LoadTodos => {\r\n    return {\r\n        type: actionTypes.LOAD_TODOS\r\n    }\r\n};\r\n\r\nconst _loadTodosSuccess = (data: ITodo[]): LoadTodosSuccess => {\r\n    return {\r\n        type: actionTypes.LOAD_TODOS_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nconst _loadTodosFailed = (err: any): LoadTodosFailed => {\r\n    return {\r\n        type: actionTypes.LOAD_TODOS_FAILED,\r\n        payload: err\r\n    }\r\n};\r\n\r\nconst _updateTodo = (): UpdateTodo => {\r\n    return {\r\n        type: actionTypes.UPDATE_TODO\r\n    }\r\n}\r\n\r\nconst _updateTodoSuccess = (data: ITodo): UpdateTodoSuccess => {\r\n    return {\r\n        type: actionTypes.UPDATE_TODO_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nconst _updateTodoFaield = (data: any): UpdateTodoFailed => {\r\n    return {\r\n        type: actionTypes.UPDATE_TODO_FAILED,\r\n        payload: data\r\n    }\r\n}\r\n\r\nconst _addTodo = (): AddTodo => {\r\n    return {\r\n        type: actionTypes.ADD_TODO\r\n    }\r\n}\r\n\r\nconst _addTodoSuccess = (data: ITodo): AddTodoSuccess => {\r\n    return {\r\n        type: actionTypes.ADD_TODO_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nconst _addTodoFailed = (data: any): AddTodoFailed => {\r\n    return {\r\n        type: actionTypes.ADD_TODO_FAILED,\r\n        payload: data\r\n    }\r\n}\r\n\r\n\r\nconst _setCount = (data: number): SetCount => {\r\n    return {\r\n        type: actionTypes.SET_COUNT_DOCUMETS,\r\n        payload: data\r\n    }\r\n};\r\n\r\nconst _deleteTodo = (): DeleteTodo => {\r\n    return {\r\n        type: actionTypes.DELETE_TODO\r\n    }\r\n}\r\n\r\nconst _deleteTodoSuccess = (todoId: string): DeleteTodoSuccess => {\r\n    return {\r\n        type: actionTypes.DELETE_TODO_SUCCESS,\r\n        payload: todoId\r\n    }\r\n}\r\n\r\nconst _deleteTodoFailed = (data: any): DeleteTodoFailed => {\r\n    return {\r\n        type: actionTypes.DELETE_TODO_FAILED,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const loadTodos = (criteria: ITodoCriteria) => async (dispatch: Dispatch<any>) => {\r\n    dispatch(_loadTodos())\r\n    try {\r\n        const { data } = await getTodos(criteria);\r\n        dispatch(_loadTodosSuccess(data.todos));\r\n        dispatch(_setCount(data.count));\r\n    } catch (err) {\r\n        dispatch(_loadTodosFailed(err))\r\n    }\r\n}\r\n\r\nexport const updateCriteria = (criteria: ITodoCriteria): UpdateCriteria => {\r\n    return {\r\n        type: actionTypes.UPDATE_CRITERIA,\r\n        payload: criteria\r\n    }\r\n}\r\n\r\nexport const updateTodoHandler = (todo: ITodo) => async (dispatch: Dispatch<any>) => {\r\n    dispatch(_updateTodo());\r\n    try {\r\n        await updateTodo(todo);\r\n        dispatch(_updateTodoSuccess(todo));\r\n    } catch (err) {\r\n        dispatch(_updateTodoFaield(err))\r\n    }\r\n};\r\n\r\nexport const deleteTodoHandler = (todoId: string) => async (dispatch: Dispatch<any>) => {\r\n    dispatch(_deleteTodo());\r\n    try {\r\n        await deleteTodo(todoId);\r\n        dispatch(_deleteTodoSuccess(todoId));\r\n    } catch (err) {\r\n        dispatch(_deleteTodoFailed(err));\r\n    }\r\n\r\n};\r\n\r\nexport const addTodoHandler = (todo: ITodo) => async (dispatch: Dispatch<any>) => {\r\n    dispatch(_addTodo());\r\n    try {\r\n        const { data } = await createTodo(todo);\r\n        dispatch(_addTodoSuccess(data));\r\n    } catch (err) {\r\n        dispatch(_addTodoFailed(err));\r\n    }\r\n}\r\n\r\n\r\n\r\nexport type TodosActions =\r\n    LoadTodos |\r\n    LoadTodosSuccess |\r\n    LoadTodosFailed |\r\n    SetCount |\r\n    UpdateCriteria |\r\n    UpdateTodo |\r\n    UpdateTodoSuccess |\r\n    UpdateTodoFailed |\r\n    DeleteTodo |\r\n    DeleteTodoSuccess |\r\n    DeleteTodoFailed |\r\n    AddTodo |\r\n    AddTodoSuccess |\r\n    AddTodoFailed\r\n    ;","import React, { useState, useEffect } from 'react'\r\nimport { DialogTransition } from '../../../shared/components/DialogTranstion/DialogTransition'\r\nimport { DialogTitle, TextField, Button } from '@material-ui/core';\r\nimport { ITodo } from '../../../models/todo';\r\n\r\nimport styles from './AddEditTodoDialog.module.scss';\r\n\r\ninterface AddTodoDialogProps {\r\n    title: string;\r\n    btnText: string;\r\n    todo?: ITodo;\r\n    isOpen: boolean;\r\n    onCloseAddEditDialog: () => void;\r\n    onUpdateTodo?: (todo: ITodo) => void;\r\n    onAddTodo?: (todo: ITodo) => void;\r\n}\r\n\r\nexport const AddEditTodoDialog: React.FC<AddTodoDialogProps> = (props) => {\r\n    const [todoVal, setTodoVal] = useState('');\r\n\r\n    const onCloseDialog = () => {\r\n        props.onCloseAddEditDialog();\r\n    };\r\n\r\n    const onSumit = () => {\r\n        if (props.todo) {\r\n            const updatedTodo: ITodo = {\r\n                ...props.todo,\r\n                text: todoVal\r\n            }\r\n            props.onUpdateTodo!(updatedTodo);\r\n        } else {\r\n            const newTodo: ITodo = {\r\n                createdDate: new Date(),\r\n                text: todoVal,\r\n                isCompleted: false\r\n            };\r\n            props.onAddTodo!(newTodo);\r\n        }\r\n        onCloseDialog();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (props.isOpen) {\r\n            setTodoVal(props.todo?.text || '')\r\n        }\r\n    }, [props.isOpen])\r\n\r\n    return (\r\n        <div className=\"dialog-container\">\r\n            <DialogTransition open={props.isOpen} handleCloseDialogTransition={onCloseDialog}>\r\n                <DialogTitle classes={{ root: 'dialog-title' }}>{props.title}</DialogTitle>\r\n                <TextField variant=\"filled\" value={todoVal} onChange={e => setTodoVal(e.target.value)} />\r\n                <div className={styles.boxBtn}>\r\n                    <Button onClick={onSumit} variant=\"contained\" size=\"small\" classes={{ root: styles.addBtnTodo }}>{props.btnText}</Button>\r\n                </div>\r\n            </DialogTransition>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { ITodo } from '../../../models/todo'\r\nimport { DialogTransition } from '../../../shared/components/DialogTranstion/DialogTransition'\r\nimport { DialogTitle } from '@material-ui/core';\r\n\r\nimport styles from './TodoPreviewDialog.module.scss';\r\n\r\ninterface TodoPreviewDialogProps {\r\n    todo?: ITodo;\r\n    isOpen: boolean;\r\n    onCloseDialog: () => void;\r\n}\r\n\r\nexport const TodoPreviewDialog: React.FC<TodoPreviewDialogProps> = (props) => {\r\n    return (\r\n        <DialogTransition open={props.isOpen} handleCloseDialogTransition={props.onCloseDialog}>\r\n            <DialogTitle classes={{ root: 'dialog-title' }}>פרטי המשימה</DialogTitle>\r\n            <div className={styles.row}>\r\n                <span>שם המשימה</span>\r\n                <span>{props.todo?.text}</span>\r\n            </div>\r\n            <div className={styles.row}>\r\n                <span>תאריך המשימה</span>\r\n                <span>{props.todo?.createdDate}</span>\r\n            </div>\r\n        </DialogTransition>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TableHead, TableRow, TableCell } from '@material-ui/core'\r\n\r\nconst headCells = [\r\n    { id: 'isComplete', label: 'בוצעה' },\r\n    { id: 'name', label: 'המשימה' },\r\n    { id: 'date', label: 'תאריך יצירה' },\r\n    { id: 'activities', label: 'פעולות' },\r\n];\r\n\r\nexport const HeaderTable:React.FC = () => {\r\n    return <TableHead>\r\n        <TableRow>\r\n            {headCells.map((headCell) => (\r\n                <TableCell\r\n                    key={headCell.id}\r\n                    align=\"right\"\r\n                    classes={{root: 'table-data'}}\r\n                >\r\n                    {headCell.label}\r\n                </TableCell>\r\n            ))}\r\n        </TableRow>\r\n    </TableHead>\r\n}\r\n","import React from 'react';\r\nimport { TableRow, Checkbox, TableCell, IconButton } from '@material-ui/core';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { ITodo } from '../../../models/todo';\r\nimport moment from 'moment';\r\n\r\nimport styles from './TodoRow.module.scss';\r\n\r\ninterface TodoRowProps {\r\n    todo: ITodo;\r\n    taskCompletedHandler: (todo: ITodo) => void;\r\n    openTodoPreviewDialog: (todo: ITodo) => void;\r\n    openEditDialog: (todo: ITodo) => void;\r\n    deleteTodoHandler: (todo: ITodo) => void;\r\n}\r\n\r\nexport const TodoRow: React.FC<TodoRowProps> = (props) => {\r\n    return <TableRow\r\n        hover\r\n        role=\"checkbox\"\r\n        tabIndex={-1}\r\n        key={props.todo._id}\r\n        selected={props.todo.isCompleted}\r\n        classes={{ root: 'table-row' }}\r\n    >\r\n        <TableCell align=\"right\" classes={{root: 'table-data'}}>\r\n            <Checkbox\r\n                onClick={() => props.taskCompletedHandler(props.todo)}\r\n                checked={props.todo.isCompleted}\r\n                size=\"small\"\r\n            />\r\n        </TableCell>\r\n        <TableCell align=\"right\" scope=\"row\" classes={{root: 'table-data'}}>\r\n            {props.todo.text}\r\n        </TableCell>\r\n        <TableCell align=\"right\" classes={{root: 'table-data'}}>{moment(props.todo.createdDate).format('DD/MM/YYYY')}</TableCell>\r\n        <TableCell align=\"right\" classes={{root: 'table-data'}}>\r\n            <IconButton size=\"small\" onClick={() => props.openTodoPreviewDialog(props.todo)}>\r\n                <VisibilityIcon fontSize=\"inherit\" />\r\n            </IconButton>\r\n            <IconButton size=\"small\" onClick={() => props.openEditDialog(props.todo)}>\r\n                <EditIcon fontSize=\"inherit\" />\r\n            </IconButton>\r\n\r\n            <IconButton size=\"small\" onClick={() => props.deleteTodoHandler(props.todo)}>\r\n                <DeleteIcon fontSize=\"inherit\" />\r\n            </IconButton>\r\n\r\n        </TableCell>\r\n    </TableRow>\r\n}","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { HeaderTable } from './HeaderTable/HeaderTable';\r\nimport { ITodo } from '../../../models/todo';\r\nimport { TodoRow } from '../TodoRow/TodoRow';\r\nimport { ITodoCriteria } from '../../../models/todo-criteria';\r\n\r\nimport styles from './TodosList.module.scss';\r\n\r\ninterface TodosListProps {\r\n    todos: ITodo[];\r\n    taskCompletedHandler: (todo: ITodo) => void;\r\n    openTodoPreviewDialog: (todo: ITodo) => void;\r\n    openEditDialog: (todo: ITodo) => void;\r\n    deleteTodoHandler: (todo: ITodo) => void;\r\n    count: number;\r\n    criteria: ITodoCriteria;\r\n    page: number;\r\n    handleChangePage: (event: unknown, newPage: number) => void;\r\n    isFinished:boolean;\r\n}\r\n\r\n\r\nexport const TodosList: React.FC<TodosListProps> = (props) => {\r\n    return <Paper>\r\n        <TableContainer>\r\n            <Table size=\"medium\">\r\n                <HeaderTable />\r\n                {props.isFinished && <TableBody>\r\n                    {props.todos && props.todos.map((todo: ITodo) => {\r\n                        return (\r\n                            <TodoRow\r\n                                key={todo._id}\r\n                                todo={todo}\r\n                                taskCompletedHandler={props.taskCompletedHandler}\r\n                                openTodoPreviewDialog={props.openTodoPreviewDialog}\r\n                                openEditDialog={props.openEditDialog}\r\n                                deleteTodoHandler={props.deleteTodoHandler}\r\n                            />\r\n                        );\r\n                    })}\r\n                </TableBody> }\r\n            </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n            classes={{selectRoot: \"hidden\", caption: styles.caption}}\r\n            component=\"div\"\r\n            count={props.count}\r\n            rowsPerPage={0}\r\n            page={props.page}\r\n            onChangePage={props.handleChangePage}\r\n        />\r\n    </Paper>\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ConfirmDisplay } from '../../shared/components/ConfirmDisplay/ConfirmDisplay';\r\nimport { TodosHeader } from '../../components/Todos/TodosHeader/TodosHeader';\r\nimport { TodosSearch } from '../../components/Todos/TodosSearch/TodosSearch';\r\nimport { TodosCountDisplay } from '../../components/Todos/TodosCountDisplay/TodosCountDisplay';\r\nimport { Button, CircularProgress } from '@material-ui/core';\r\nimport styles from './TodosContainer.module.scss';\r\nimport * as actions from '../../store/actions/actionsTodos/index';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../..';\r\nimport { ITodoCriteria } from '../../models/todo-criteria';\r\nimport { ITodo } from '../../models/todo';\r\nimport { AddEditTodoDialog } from '../../components/Todos/AddEditTodoDialog/AddEditTodoDialog';\r\nimport { TodoPreviewDialog } from '../../components/Todos/TodoPreviewDialog/TodoPreviewDialog';\r\nimport { TodosList } from '../../components/Todos/TodosList/TodosList';\r\n\r\n\r\nexport const TodosContainer: React.FC<any> = (props) => {\r\n    const [isOpenDeleteConfirm, setIsOpenDeleteConfirm] = useState<boolean>(false);\r\n    const [page, setPage] = useState<number>(0);\r\n    const [isOpeAddDialog, setIsOpenAddDialog] = useState<boolean>(false);\r\n    const [isOpeEditDialog, setIsOpeEditDialog] = useState<boolean>(false);\r\n    const [isOpenTodoPreviewDialog, setIsOpenTodoPreviewDialog] = useState<boolean>(false);\r\n    const [currentActiveTodo, setCurrentActiveTodo] = useState<ITodo>();\r\n\r\n    const criteria: ITodoCriteria = useSelector<AppState, any>(state => state.todosReducer.criteria);\r\n    const isLoading: boolean = useSelector<AppState, any>(state => state.todosReducer.isLoading);\r\n    const isFinished: boolean = useSelector<AppState, any>(state => state.todosReducer.isFinished);\r\n    const todos = useSelector<AppState, any>(state => state.todosReducer.todos);\r\n    const count = useSelector<AppState, any>(state => state.todosReducer.count);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(actions.loadTodos(criteria))\r\n    }, [dispatch, criteria])\r\n\r\n    const handleChangePage = (event: unknown, newPage: any) => {\r\n        dispatch(actions.updateCriteria({ ...criteria, offset: newPage * criteria.pageSize }))\r\n        setPage(newPage);\r\n    };\r\n\r\n    const updateTodo = (todo: ITodo) => {\r\n        dispatch(actions.updateTodoHandler(todo));\r\n    }\r\n\r\n    const onChangeSearchHandler = (term: string) => {\r\n        dispatch(actions.updateCriteria({ ...criteria, offset: 0, pageSize: 5, term }))\r\n    }\r\n\r\n    const todoRowClicked = (todo: ITodo) => {\r\n        const copyTodo = { ...todo };\r\n        copyTodo.isCompleted = !copyTodo.isCompleted;\r\n        updateTodo(copyTodo);\r\n    };\r\n\r\n    const deleteTodoHandler = () => {\r\n        if (currentActiveTodo && currentActiveTodo._id) {\r\n            dispatch(actions.deleteTodoHandler(currentActiveTodo._id));\r\n            setIsOpenDeleteConfirm(false);\r\n        }\r\n    };\r\n\r\n    const addTodo = (todo: ITodo) => {\r\n        dispatch(actions.addTodoHandler(todo))\r\n    };\r\n\r\n    const openEditDialog = (todo: ITodo) => {\r\n        setCurrentActiveTodo(todo);\r\n        setIsOpeEditDialog(true);\r\n    }\r\n\r\n    const openTodoPreviewDialog = (todo: ITodo) => {\r\n        setCurrentActiveTodo(todo);\r\n        setIsOpenTodoPreviewDialog(true);\r\n    }\r\n\r\n    const openDialogDeleteHandler = (todo: ITodo) => {\r\n        setCurrentActiveTodo(todo);\r\n        setIsOpenDeleteConfirm(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <ConfirmDisplay\r\n                isOpen={isOpenDeleteConfirm}\r\n                onDisagree={() => setIsOpenDeleteConfirm(false)}\r\n                onAgree={deleteTodoHandler}\r\n                title=\"מחיקת משימה\"\r\n                content=\"האם אתה בטוח שתרצה למחוק?\"/>\r\n            <TodoPreviewDialog isOpen={isOpenTodoPreviewDialog} onCloseDialog={() => setIsOpenTodoPreviewDialog(false)} todo={currentActiveTodo} />\r\n            <AddEditTodoDialog\r\n                title=\"הוספת משימה חדשה\"\r\n                btnText=\"הוסף משימה\"\r\n                isOpen={isOpeAddDialog}\r\n                onCloseAddEditDialog={() => setIsOpenAddDialog(false)}\r\n                onAddTodo={addTodo} />\r\n            <AddEditTodoDialog\r\n                title=\"עדכון משימה\"\r\n                btnText=\"עדכן משימה\"\r\n                isOpen={isOpeEditDialog}\r\n                onCloseAddEditDialog={() => setIsOpeEditDialog(false)}\r\n                todo={currentActiveTodo}\r\n                onUpdateTodo={updateTodo} />\r\n            <TodosHeader headerTitle=\"ניהול משימות\" />\r\n            <TodosSearch onSearch={onChangeSearchHandler} />\r\n            {isLoading && <CircularProgress classes={{ root: styles.circularProgress }} thickness={6.5} size={50} />}\r\n            <section className={styles.sectionDisplayCount}>\r\n                <TodosCountDisplay count={count} />\r\n                <Button onClick={() => setIsOpenAddDialog(true)} variant=\"contained\" size=\"small\" classes={{ root: styles.newTasBtn }}>משימה חדשה</Button>\r\n            </section>\r\n            <TodosList\r\n                todos={todos}\r\n                taskCompletedHandler={todoRowClicked}\r\n                openTodoPreviewDialog={openTodoPreviewDialog}\r\n                openEditDialog={openEditDialog}\r\n                deleteTodoHandler={openDialogDeleteHandler}\r\n                count={count}\r\n                criteria={criteria}\r\n                page={page}\r\n                handleChangePage={handleChangePage}\r\n                isFinished={isFinished}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Layout } from './components/Layout/Layout';\nimport { TodosContainer } from './containers/TodosContainer/TodosContainer';\n\nfunction App() {\n  return (\n    <div>\n      <Layout>\n        <TodosContainer />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import { ITodo } from '../../../models/todo';\r\nimport { TodosActions } from '../../actions/actionsTodos/todos';\r\nimport * as actionTypes from '../../actions/actionsTodos/actionTypes';\r\nimport { ITodoCriteria } from '../../../models/todo-criteria';\r\n\r\ninterface TodosState {\r\n    todos: ITodo[];\r\n    criteria: ITodoCriteria;\r\n    count: number;\r\n    isLoading: boolean;\r\n    isFinished: boolean;\r\n    error: any;\r\n}\r\n\r\nconst initialState: TodosState = {\r\n    todos: [],\r\n    criteria: {\r\n        offset: 0,\r\n        pageSize: 5\r\n    },\r\n    count: 0,\r\n    isLoading: false,\r\n    isFinished: false,\r\n    error: null\r\n}\r\n\r\nconst reducer = (state = initialState, action: TodosActions) => {\r\n    switch (action.type) {\r\n        case actionTypes.LOAD_TODOS:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                isFinished: false\r\n            }\r\n        case actionTypes.LOAD_TODOS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todos: action.payload,\r\n                isLoading: false,\r\n                isFinished: true\r\n            }\r\n\r\n        case actionTypes.SET_COUNT_DOCUMETS:\r\n            return {\r\n                ...state,\r\n                count: action.payload\r\n            }\r\n        case actionTypes.UPDATE_CRITERIA:\r\n            return {\r\n                ...state,\r\n                criteria: action.payload\r\n            }\r\n        case actionTypes.UPDATE_TODO:\r\n            return {\r\n                ...state,\r\n            }\r\n        case actionTypes.UPDATE_TODO_SUCCESS:\r\n            const copyTodos = [...state.todos];\r\n            const index = state.todos.findIndex(todo => todo._id === action.payload._id);\r\n            copyTodos[index] = action.payload;\r\n            return {\r\n                ...state,\r\n                todos: copyTodos,\r\n            }\r\n        case actionTypes.DELETE_TODO:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                isFinished: false\r\n            }\r\n\r\n        case actionTypes.DELETE_TODO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(todo => todo._id !== action.payload),\r\n                count: state.count - 1,\r\n                isLoading: false,\r\n                isFinished: true\r\n            }\r\n        case actionTypes.ADD_TODO:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                isFinished: false\r\n            }\r\n        case actionTypes.ADD_TODO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                todos: [action.payload, ...state.todos],\r\n                count: state.count + 1,\r\n                isLoading: false,\r\n                isFinished: true\r\n            }\r\n        case actionTypes.ADD_TODO_FAILED:\r\n        case actionTypes.UPDATE_TODO_FAILED:\r\n        case actionTypes.DELETE_TODO_FAILED:\r\n        case actionTypes.LOAD_TODOS_FAILED:\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isLoading: false,\r\n                isFinished: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { create } from 'jss';\nimport rtl from 'jss-rtl';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, compose, applyMiddleware } from 'redux';\n\nimport todosReducer from './store/reducers/todos/todos';\nimport thunk from 'redux-thunk';\n\n\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\n\nexport const rootReducer = combineReducers({\n  todosReducer\n})\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <StylesProvider jss={jss}>\n        <App />\n      </StylesProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionDisplayCount\":\"TodosContainer_sectionDisplayCount__2ziBg\",\"newTasBtn\":\"TodosContainer_newTasBtn__b4hPl\",\"backdrop\":\"TodosContainer_backdrop__Wrw0u\",\"tableCell\":\"TodosContainer_tableCell__2a1Jt\",\"circularProgress\":\"TodosContainer_circularProgress__1ZKVs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"disagreeBtn\":\"ConfirmDisplay_disagreeBtn__1bK_c\",\"agreeBtn\":\"ConfirmDisplay_agreeBtn__1Sqqn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boxBtn\":\"AddEditTodoDialog_boxBtn__3TrsC\",\"addBtnTodo\":\"AddEditTodoDialog_addBtnTodo__1rBXT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"TodoPreviewDialog_row__3V6Xn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar\":\"Toolbar_toolbar__3J2Rj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contenDialog\":\"DialogTransition_contenDialog__rYDkI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerSection\":\"TodosHeader_headerSection__3A6JN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countText\":\"TodosCountDisplay_countText__xFwiG\"};"],"sourceRoot":""}